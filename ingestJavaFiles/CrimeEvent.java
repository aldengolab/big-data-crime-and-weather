/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package agolab.CrimeAndWeatherApp.crimeEvent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-27")
public class CrimeEvent implements org.apache.thrift.TBase<CrimeEvent, CrimeEvent._Fields>, java.io.Serializable, Cloneable, Comparable<CrimeEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CrimeEvent");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField HOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("hour", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PRIMARY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CrimeEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CrimeEventTupleSchemeFactory());
  }

  public long ID; // required
  public long year; // required
  public long month; // required
  public long day; // required
  public long hour; // required
  public String primaryType; // required
  public String description; // required
  public String city; // required
  public String state; // required
  public long latitude; // optional
  public long longitude; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "ID"),
    YEAR((short)2, "year"),
    MONTH((short)3, "month"),
    DAY((short)4, "day"),
    HOUR((short)5, "hour"),
    PRIMARY_TYPE((short)6, "primaryType"),
    DESCRIPTION((short)7, "description"),
    CITY((short)8, "city"),
    STATE((short)9, "state"),
    LATITUDE((short)10, "latitude"),
    LONGITUDE((short)11, "longitude");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // YEAR
          return YEAR;
        case 3: // MONTH
          return MONTH;
        case 4: // DAY
          return DAY;
        case 5: // HOUR
          return HOUR;
        case 6: // PRIMARY_TYPE
          return PRIMARY_TYPE;
        case 7: // DESCRIPTION
          return DESCRIPTION;
        case 8: // CITY
          return CITY;
        case 9: // STATE
          return STATE;
        case 10: // LATITUDE
          return LATITUDE;
        case 11: // LONGITUDE
          return LONGITUDE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __YEAR_ISSET_ID = 1;
  private static final int __MONTH_ISSET_ID = 2;
  private static final int __DAY_ISSET_ID = 3;
  private static final int __HOUR_ISSET_ID = 4;
  private static final int __LATITUDE_ISSET_ID = 5;
  private static final int __LONGITUDE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LATITUDE,_Fields.LONGITUDE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HOUR, new org.apache.thrift.meta_data.FieldMetaData("hour", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIMARY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("primaryType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CrimeEvent.class, metaDataMap);
  }

  public CrimeEvent() {
  }

  public CrimeEvent(
    long ID,
    long year,
    long month,
    long day,
    long hour,
    String primaryType,
    String description,
    String city,
    String state)
  {
    this();
    this.ID = ID;
    setIDIsSet(true);
    this.year = year;
    setYearIsSet(true);
    this.month = month;
    setMonthIsSet(true);
    this.day = day;
    setDayIsSet(true);
    this.hour = hour;
    setHourIsSet(true);
    this.primaryType = primaryType;
    this.description = description;
    this.city = city;
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CrimeEvent(CrimeEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ID = other.ID;
    this.year = other.year;
    this.month = other.month;
    this.day = other.day;
    this.hour = other.hour;
    if (other.isSetPrimaryType()) {
      this.primaryType = other.primaryType;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.latitude = other.latitude;
    this.longitude = other.longitude;
  }

  public CrimeEvent deepCopy() {
    return new CrimeEvent(this);
  }

  @Override
  public void clear() {
    setIDIsSet(false);
    this.ID = 0;
    setYearIsSet(false);
    this.year = 0;
    setMonthIsSet(false);
    this.month = 0;
    setDayIsSet(false);
    this.day = 0;
    setHourIsSet(false);
    this.hour = 0;
    this.primaryType = null;
    this.description = null;
    this.city = null;
    this.state = null;
    setLatitudeIsSet(false);
    this.latitude = 0;
    setLongitudeIsSet(false);
    this.longitude = 0;
  }

  public long getID() {
    return this.ID;
  }

  public CrimeEvent setID(long ID) {
    this.ID = ID;
    setIDIsSet(true);
    return this;
  }

  public void unsetID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getYear() {
    return this.year;
  }

  public CrimeEvent setYear(long year) {
    this.year = year;
    setYearIsSet(true);
    return this;
  }

  public void unsetYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  public void setYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
  }

  public long getMonth() {
    return this.month;
  }

  public CrimeEvent setMonth(long month) {
    this.month = month;
    setMonthIsSet(true);
    return this;
  }

  public void unsetMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  public void setMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTH_ISSET_ID, value);
  }

  public long getDay() {
    return this.day;
  }

  public CrimeEvent setDay(long day) {
    this.day = day;
    setDayIsSet(true);
    return this;
  }

  public void unsetDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAY_ISSET_ID);
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return EncodingUtils.testBit(__isset_bitfield, __DAY_ISSET_ID);
  }

  public void setDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAY_ISSET_ID, value);
  }

  public long getHour() {
    return this.hour;
  }

  public CrimeEvent setHour(long hour) {
    this.hour = hour;
    setHourIsSet(true);
    return this;
  }

  public void unsetHour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUR_ISSET_ID);
  }

  /** Returns true if field hour is set (has been assigned a value) and false otherwise */
  public boolean isSetHour() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUR_ISSET_ID);
  }

  public void setHourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUR_ISSET_ID, value);
  }

  public String getPrimaryType() {
    return this.primaryType;
  }

  public CrimeEvent setPrimaryType(String primaryType) {
    this.primaryType = primaryType;
    return this;
  }

  public void unsetPrimaryType() {
    this.primaryType = null;
  }

  /** Returns true if field primaryType is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimaryType() {
    return this.primaryType != null;
  }

  public void setPrimaryTypeIsSet(boolean value) {
    if (!value) {
      this.primaryType = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public CrimeEvent setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public CrimeEvent setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getState() {
    return this.state;
  }

  public CrimeEvent setState(String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public long getLatitude() {
    return this.latitude;
  }

  public CrimeEvent setLatitude(long latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  public long getLongitude() {
    return this.longitude;
  }

  public CrimeEvent setLongitude(long longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetID();
      } else {
        setID((Long)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((Long)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((Long)value);
      }
      break;

    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((Long)value);
      }
      break;

    case HOUR:
      if (value == null) {
        unsetHour();
      } else {
        setHour((Long)value);
      }
      break;

    case PRIMARY_TYPE:
      if (value == null) {
        unsetPrimaryType();
      } else {
        setPrimaryType((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Long)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getID();

    case YEAR:
      return getYear();

    case MONTH:
      return getMonth();

    case DAY:
      return getDay();

    case HOUR:
      return getHour();

    case PRIMARY_TYPE:
      return getPrimaryType();

    case DESCRIPTION:
      return getDescription();

    case CITY:
      return getCity();

    case STATE:
      return getState();

    case LATITUDE:
      return getLatitude();

    case LONGITUDE:
      return getLongitude();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetID();
    case YEAR:
      return isSetYear();
    case MONTH:
      return isSetMonth();
    case DAY:
      return isSetDay();
    case HOUR:
      return isSetHour();
    case PRIMARY_TYPE:
      return isSetPrimaryType();
    case DESCRIPTION:
      return isSetDescription();
    case CITY:
      return isSetCity();
    case STATE:
      return isSetState();
    case LATITUDE:
      return isSetLatitude();
    case LONGITUDE:
      return isSetLongitude();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CrimeEvent)
      return this.equals((CrimeEvent)that);
    return false;
  }

  public boolean equals(CrimeEvent that) {
    if (that == null)
      return false;

    boolean this_present_ID = true;
    boolean that_present_ID = true;
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (this.ID != that.ID)
        return false;
    }

    boolean this_present_year = true;
    boolean that_present_year = true;
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (this.year != that.year)
        return false;
    }

    boolean this_present_month = true;
    boolean that_present_month = true;
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (this.month != that.month)
        return false;
    }

    boolean this_present_day = true;
    boolean that_present_day = true;
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (this.day != that.day)
        return false;
    }

    boolean this_present_hour = true;
    boolean that_present_hour = true;
    if (this_present_hour || that_present_hour) {
      if (!(this_present_hour && that_present_hour))
        return false;
      if (this.hour != that.hour)
        return false;
    }

    boolean this_present_primaryType = true && this.isSetPrimaryType();
    boolean that_present_primaryType = true && that.isSetPrimaryType();
    if (this_present_primaryType || that_present_primaryType) {
      if (!(this_present_primaryType && that_present_primaryType))
        return false;
      if (!this.primaryType.equals(that.primaryType))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_latitude = true && this.isSetLatitude();
    boolean that_present_latitude = true && that.isSetLatitude();
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_longitude = true && this.isSetLongitude();
    boolean that_present_longitude = true && that.isSetLongitude();
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ID = true;
    list.add(present_ID);
    if (present_ID)
      list.add(ID);

    boolean present_year = true;
    list.add(present_year);
    if (present_year)
      list.add(year);

    boolean present_month = true;
    list.add(present_month);
    if (present_month)
      list.add(month);

    boolean present_day = true;
    list.add(present_day);
    if (present_day)
      list.add(day);

    boolean present_hour = true;
    list.add(present_hour);
    if (present_hour)
      list.add(hour);

    boolean present_primaryType = true && (isSetPrimaryType());
    list.add(present_primaryType);
    if (present_primaryType)
      list.add(primaryType);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_latitude = true && (isSetLatitude());
    list.add(present_latitude);
    if (present_latitude)
      list.add(latitude);

    boolean present_longitude = true && (isSetLongitude());
    list.add(present_longitude);
    if (present_longitude)
      list.add(longitude);

    return list.hashCode();
  }

  @Override
  public int compareTo(CrimeEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHour()).compareTo(other.isSetHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hour, other.hour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrimaryType()).compareTo(other.isSetPrimaryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimaryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryType, other.primaryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(other.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, other.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(other.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, other.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CrimeEvent(");
    boolean first = true;

    sb.append("ID:");
    sb.append(this.ID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    sb.append(this.year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("month:");
    sb.append(this.month);
    first = false;
    if (!first) sb.append(", ");
    sb.append("day:");
    sb.append(this.day);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hour:");
    sb.append(this.hour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("primaryType:");
    if (this.primaryType == null) {
      sb.append("null");
    } else {
      sb.append(this.primaryType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (isSetLatitude()) {
      if (!first) sb.append(", ");
      sb.append("latitude:");
      sb.append(this.latitude);
      first = false;
    }
    if (isSetLongitude()) {
      if (!first) sb.append(", ");
      sb.append("longitude:");
      sb.append(this.longitude);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'ID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'year' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'month' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'day' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'hour' because it's a primitive and you chose the non-beans generator.
    if (primaryType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'primaryType' was not present! Struct: " + toString());
    }
    if (description == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' was not present! Struct: " + toString());
    }
    if (city == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'city' was not present! Struct: " + toString());
    }
    if (state == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CrimeEventStandardSchemeFactory implements SchemeFactory {
    public CrimeEventStandardScheme getScheme() {
      return new CrimeEventStandardScheme();
    }
  }

  private static class CrimeEventStandardScheme extends StandardScheme<CrimeEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CrimeEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ID = iprot.readI64();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.year = iprot.readI64();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.month = iprot.readI64();
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.day = iprot.readI64();
              struct.setDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.hour = iprot.readI64();
              struct.setHourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRIMARY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.primaryType = iprot.readString();
              struct.setPrimaryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.latitude = iprot.readI64();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.longitude = iprot.readI64();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetYear()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'year' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMonth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'month' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'day' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHour()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'hour' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CrimeEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.ID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR_FIELD_DESC);
      oprot.writeI64(struct.year);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_FIELD_DESC);
      oprot.writeI64(struct.month);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_FIELD_DESC);
      oprot.writeI64(struct.day);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOUR_FIELD_DESC);
      oprot.writeI64(struct.hour);
      oprot.writeFieldEnd();
      if (struct.primaryType != null) {
        oprot.writeFieldBegin(PRIMARY_TYPE_FIELD_DESC);
        oprot.writeString(struct.primaryType);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeString(struct.state);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLatitude()) {
        oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
        oprot.writeI64(struct.latitude);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLongitude()) {
        oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
        oprot.writeI64(struct.longitude);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CrimeEventTupleSchemeFactory implements SchemeFactory {
    public CrimeEventTupleScheme getScheme() {
      return new CrimeEventTupleScheme();
    }
  }

  private static class CrimeEventTupleScheme extends TupleScheme<CrimeEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CrimeEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.ID);
      oprot.writeI64(struct.year);
      oprot.writeI64(struct.month);
      oprot.writeI64(struct.day);
      oprot.writeI64(struct.hour);
      oprot.writeString(struct.primaryType);
      oprot.writeString(struct.description);
      oprot.writeString(struct.city);
      oprot.writeString(struct.state);
      BitSet optionals = new BitSet();
      if (struct.isSetLatitude()) {
        optionals.set(0);
      }
      if (struct.isSetLongitude()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLatitude()) {
        oprot.writeI64(struct.latitude);
      }
      if (struct.isSetLongitude()) {
        oprot.writeI64(struct.longitude);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CrimeEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ID = iprot.readI64();
      struct.setIDIsSet(true);
      struct.year = iprot.readI64();
      struct.setYearIsSet(true);
      struct.month = iprot.readI64();
      struct.setMonthIsSet(true);
      struct.day = iprot.readI64();
      struct.setDayIsSet(true);
      struct.hour = iprot.readI64();
      struct.setHourIsSet(true);
      struct.primaryType = iprot.readString();
      struct.setPrimaryTypeIsSet(true);
      struct.description = iprot.readString();
      struct.setDescriptionIsSet(true);
      struct.city = iprot.readString();
      struct.setCityIsSet(true);
      struct.state = iprot.readString();
      struct.setStateIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.latitude = iprot.readI64();
        struct.setLatitudeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.longitude = iprot.readI64();
        struct.setLongitudeIsSet(true);
      }
    }
  }

}

